using System;
using System.Linq;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;

namespace Simple.OData.Client.Tests.FluentApi
{
    public class InsertTypedTests : TestBase
    {
        public InsertTypedTests(ITestOutputHelper output)
            : base(output: output)
        { }

        [Fact]
        public async Task Insert()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var product = await client
                .For<Product>()
                .Set(new { ProductName = "Test1", UnitPrice = 18m })
                .InsertEntryAsync();

            Assert.Equal("Test1", product.ProductName);
        }

        [Fact]
        public async Task InsertAutogeneratedID()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var product = await client
                .For<Product>()
                .Set(new { ProductName = "Test1", UnitPrice = 18m })
                .InsertEntryAsync();

            Assert.True(product.ProductID > 0);
            Assert.Equal("Test1", product.ProductName);
        }

        [Fact]
        public async Task InsertWithMappedColumn()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var product = await client
                .For<Product>()
                .Set(new Product { ProductName = "Test1", UnitPrice = 18m, MappedEnglishName = "EnglishTest" })
                .InsertEntryAsync();

            Assert.Equal("Test1", product.ProductName);
            Assert.Equal("EnglishTest", product.MappedEnglishName);
        }

        [Fact]
        public async Task InsertProductWithCategoryByID()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var category = await client
                .For<Category>()
                .Set(new { CategoryName = "Test3" })
                .InsertEntryAsync();
            var product = await client
                .For<Product>()
                .Set(new { ProductName = "Test4", UnitPrice = 18m, CategoryID = category.CategoryID })
                .InsertEntryAsync();

            Assert.Equal("Test4", product.ProductName);
            Assert.Equal(category.CategoryID, product.CategoryID);
            category = await client
                .For<Category>()
                .Expand(x => new { x.Products })
                .Filter(x => x.CategoryName == "Test3")
                .FindEntryAsync();
            Assert.True(category.Products.Count() == 1);
        }

        [Fact]
        public async Task InsertProductWithCategoryByAssociation()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var category = await client
                .For<Category>()
                .Set(new { CategoryName = "Test5" })
                .InsertEntryAsync();
            var product = await client
                .For<Product>()
                .Set(new { ProductName = "Test6", UnitPrice = 18m, Category = category })
                .InsertEntryAsync();

            Assert.Equal("Test6", product.ProductName);
            Assert.Equal(category.CategoryID, product.CategoryID);
            category = await client
                .For<Category>()
                .Expand(x => new { x.Products })
                .Filter(x => x.CategoryName == "Test5")
                .FindEntryAsync();
            Assert.True(category.Products.Count() == 1);
        }

        [Fact]
        public async Task InsertDeepProductWithCategoryByAssociation()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());

            var category = await client
                .For<Category>()
                .Set(new CategoryWithICollection
                {
                    CategoryName = "Test5",
                    Products = new System.Collections.Generic.HashSet<Product>
                    {
                        new Product { ProductName = "Test7", UnitPrice = 14m, Category = new Category { CategoryID = 6 } },
                        new Product { ProductName = "Test8", UnitPrice = 16m },
                        new Product { ProductName = "Test9", UnitPrice = 18m }
                    }
                })
                .Include(x => x.Products)
                .InsertEntryAsync();

            //var category = await client
            //    .For<Category>()
            //    .Set(new
            //    {
            //        CategoryName = "Test5",
            //        Products = new[]
            //        {
            //            new { ProductName = "Test7", UnitPrice = 18m },
            //            new { ProductName = "Test8", UnitPrice = 18m },
            //            new { ProductName = "Test9", UnitPrice = 18m }
            //        }
            //    })
            //    .InsertEntryAsync();

            //var product = await client
            //    .For<Product>()
            //    .Set(new { ProductName = "Test6", UnitPrice = 18m, Category = category })
            //    .InsertEntryAsync();

            //Assert.Equal("Test6", product.ProductName);
            //Assert.Equal(category.CategoryID, product.CategoryID);
            category = await client
                .For<Category>()
                .Expand(x => new { x.Products })
                .Filter(x => x.CategoryName == "Test5")
                .FindEntryAsync();
            Assert.True(category.Products.Count() == 3);
        }

        [Fact]
        public async Task InsertCategoryWithPictureAsBytes()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var category = await client
                .For<Category>()
                .Set(new { CategoryName = "Test7", Picture = new byte[] { 1, 2, 3, 4, 5 } })
                .InsertEntryAsync();

            category = await client
                .For<Category>()
                .Expand(x => new { x.Products })
                .Filter(x => x.CategoryName == "Test7")
                .FindEntryAsync();
            Assert.True(category.Picture.Length > 0);
        }

        [Fact]
        public async Task InsertCategoryWithPictureAsString()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var category = await client
                .For<Category>()
                .Set(new { CategoryName = "Test7", Picture = Convert.ToBase64String(new byte[] { 1, 2, 3, 4, 5 }) })
                .InsertEntryAsync();

            category = await client
                .For<Category>()
                .Expand(x => new { x.Products })
                .Filter(x => x.CategoryName == "Test7")
                .FindEntryAsync();
            Assert.True(category.Picture.Length > 0);
        }

        [Fact]
        public async Task InsertShip()
        {
            var client = new ODataClient(CreateDefaultSettings().WithHttpMock());
            var ship = await client
                .For<Transport>()
                .As<Ship>()
                .Set(new Ship { ShipName = "Test1" })
                .InsertEntryAsync();

            Assert.Equal("Test1", ship.ShipName);
        }
    }
}
